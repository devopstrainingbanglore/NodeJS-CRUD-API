{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample application for Usermanagement.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io).",
    "version": "1.0.0",
    "title": "Swagger User management",
    "contact": {
      "email": "balureddy@outlook.com"
    }
  },
  "basePath": "/user",
  "tags": [
    {
      "name": "user",
      "description": "Operations about user management"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "500": {
            "description": "Unable to create User"
          }
        }
      }
    },
    "/user/getAll": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get all users",
        "description": "",
        "operationId": "getAllUsers",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "500": {
            "description": "Unable to fetch users"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user id",
        "description": "",
        "operationId": "getUserById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Unable to fetch user"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user by id",
        "operationId": "updateUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User Id that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Unable to update user"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user by id",
        "operationId": "deleteUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The user id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Unable to delete user"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "email",
        "phone"
      ],
      "properties": {
        "_id": {
          "type": "integer",
          "format": "int64",
          "description": "Auto Generated Id by Mongo DB for the user when user is created"
        },
        "firstName": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    }
  }
}